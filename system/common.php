<?php	use GeoIp2\Database\Reader;		function utf8_uri_encode($utf8_string, $length = 0)	{		$unicode = '';		$values = [];		$num_octets = 1;		$unicode_length = 0;		$string_length = strlen($utf8_string);		for($i = 0; $i < $string_length; $i++){			$value = ord($utf8_string[$i]);			if($value < 128){				if($length && ($unicode_length >= $length))					break;				$unicode .= chr($value);				$unicode_length++;			} else{				if(count($values) == 0)					$num_octets = ($value < 224) ? 2 : 3;				$values[] = $value;				if($length && ($unicode_length + ($num_octets * 3)) > $length)					break;				if(count($values) == $num_octets){					if($num_octets == 3){						$unicode .= '%' . dechex($values[0]) . '%' . dechex($values[1]) . '%' . dechex($values[2]);						$unicode_length += 9;					} else{						$unicode .= '%' . dechex($values[0]) . '%' . dechex($values[1]);						$unicode_length += 6;					}					$values = [];					$num_octets = 1;				}			}		}		return $unicode;	}	function seems_utf8($str)	{		$length = strlen($str);		for($i = 0; $i < $length; $i++){			$c = ord($str[$i]);			if($c < 0x80)				$n = 0; else if(($c & 0xE0) == 0xC0)				$n = 1;			else if(($c & 0xF0) == 0xE0)				$n = 2;			else if(($c & 0xF8) == 0xF0)				$n = 3;			else if(($c & 0xFC) == 0xF8)				$n = 4;			else if(($c & 0xFE) == 0xFC)				$n = 5;			else return false;			for($j = 0; $j < $n; $j++){				if((++$i == $length) || ((ord($str[$i]) & 0xC0) != 0x80))					return false;			}		}		return true;	}	function seo_string($title)	{		$title = strip_tags($title);		$title = preg_replace('|%([a-fA-F0-9][a-fA-F0-9])|', '---$1---', $title);		$title = str_replace('%', '', $title);		$title = preg_replace('|---([a-fA-F0-9][a-fA-F0-9])---|', '%$1', $title);		if(seems_utf8($title)){			if(function_exists('mb_strtolower')){				$title = mb_strtolower($title, 'UTF-8');			}			$title = utf8_uri_encode($title, 200);		}		$title = strtolower($title);		$title = preg_replace('/&.+?;/', '', $title);		$title = str_replace('.', '-', $title);		$title = preg_replace('/[^%a-z0-9 _-]/', '', $title);		$title = preg_replace('/\s+/', '-', $title);		$title = preg_replace('|-+|', '-', $title);		$title = trim($title, '-');		return $title;	}      	function is_ajax()	{		return isset($_POST['ajax']) || isset($_GET['ajax']);	}    	function json($data = [])	{		header('Content-Type: application/json');		die(json_encode($data));	}	function in_file()	{		if(defined('DMNCMS')){			if(!DMNCMS)				die('Your not allowed to access this file!');		} else{			die('Your not allowed to access this file!');		}		return true;	}    	function ip($int = false)	{		if(!empty($_SERVER['HTTP_CLIENT_IP'])){			$ip = $_SERVER['HTTP_CLIENT_IP'];		} 		if(!empty($_SERVER['HTTP_X_FORWARDED_FOR'])){			$ip = $_SERVER['HTTP_X_FORWARDED_FOR'];		} 		if(!empty($_SERVER['REMOTE_ADDR'])) {			$ip = $_SERVER['REMOTE_ADDR'];		} 		if(!empty($_SERVER['HTTP_CF_CONNECTING_IP'])){			$ip = $_SERVER['HTTP_CF_CONNECTING_IP'];		} 		if(!empty($_SERVER['HTTP_X_REAL_IP'])){			$ip = $_SERVER['HTTP_X_REAL_IP'];   		}		if(strpos($ip, ',') !== false) {			list($ip) = explode(',', $ip);		}		$test = str_replace(array('.', ',', ' '), '', $ip);		if(!ctype_digit($test)){			$ip = $_SERVER['REMOTE_ADDR'];		}		$ip = ip2long($ip);		if(!$int) {			$ip = long2ip($ip);		}		return $ip;	}		function check_ip_white_list($ip_list = [])	{		if(!is_array($ip_list)){			if(strstr($ip_list, ',') !== false){				$ip_list = explode(',', $ip_list);			} else{				$ip_list = [$ip_list];			}		}		if(!in_array(ip(), $ip_list)){			header("HTTP/1.1 403 Forbidden");			exit('Restricted Area');		}	}    	function pre($val, $return = false, $color = '#fff')	{		echo '<pre style="color: ' . $color . ';">';		print_r($val, $return);		echo '</pre>';	}    	function writelog($logentry, $lgname)	{		$mtime = microtime(true);		$now = \DateTime::createFromFormat('U.u', $mtime);		if(is_bool($now)){			$now = \DateTime::createFromFormat('U.u', $mtime += 0.001);		}		$log = '[' . ip() . '] ' . $logentry . '';		$log_name = APP_PATH . DS . 'logs' . DS . $lgname . '_' . date("m-d-y") . '.txt';		$logfile = @fopen($log_name, "a+");		if($logfile){			fwrite($logfile, "[" . $now->format("m-d-Y H:i:s.u") . "] $log\r\n");			fclose($logfile);		}	}    	function get_country_code($ip = '127.0.0.1')	{		if(filter_var($ip, FILTER_VALIDATE_IP) != false){			if($ip != '127.0.0.1'){				return find_country_code($ip);			}		}		return 'us';	}    	function find_country_code($ip)	{		static $geoData = null;		if($geoData == null)			$geoData = new Reader(APP_PATH . DS . 'data' . DS . 'country.mmdb');					try{			$record = $geoData->country($ip);			return strtolower($record->country->isoCode);		} 		catch(\GeoIp2\Exception\AddressNotFoundException $e){			return 'us';		}	}		function arithmetic($equation)	{		$result = 0;		$equation = preg_replace("/[^a-z0-9+\-.*\/()%]/", "", $equation);		$equation = preg_replace("/([a-z])+/i", "\$$0", $equation);		$equation = preg_replace("/([+-])([0-9]{1})(%)/", "*(1\$1.0\$2)", $equation);		$equation = preg_replace("/([+-])([0-9]+)(%)/", "*(1\$1.\$2)", $equation);		$equation = preg_replace("/([0-9]{1})(%)/", ".0\$1", $equation);		$equation = preg_replace("/([0-9]+)(%)/", ".\$1", $equation);		if($equation != ""){			$result = @eval("return " . $equation . ";");		}		if($result == null){			return 0;		}		return $result;	}        function getPHPExecutablePath()    {        if(strtolower(PHP_SHLIB_SUFFIX) === 'dll'){            $paths = explode(PATH_SEPARATOR, getenv('PATH'));            foreach($paths as $path){                if(strstr($path, 'php.exe') && isset($_SERVER["WINDIR"]) && file_exists($path) && is_file($path)){                    return $path;                } else{                    $php_executable = $path . DIRECTORY_SEPARATOR . "php" . (isset($_SERVER["WINDIR"]) ? ".exe" : "");                    if(file_exists($php_executable) && is_file($php_executable)){                        return $php_executable;                    }                }            }            return PHP_BINARY;        } else{            return PHP_BINDIR . DS . 'php';        }    }    function isCommandLineInterface()    {        return (php_sapi_name() === 'cli');    }	function load_class($class)	{		static $_classes = [];		if(isset($_classes[$class])){			return $_classes[$class];		}		$name = false;		$file = SYSTEM_PATH . DS . $class . '.class.php';		if(file_exists($file)){			$name = $class;			if(class_exists($name) === false){				require($file);			}		}				if($name === false){			exit('Unable to locate the specified class: ' . $class . '.php');		}		is_loaded($class);		$_classes[$class] = new $name();		return $_classes[$class];	}    	function is_loaded($class = '')	{		static $_is_loaded = [];		if($class != ''){			$_is_loaded[strtolower($class)] = $class;		}		return $_is_loaded;	}    function log_post()    {        if(isset($_POST) && !empty($_POST)){            $kv = [];            foreach($_POST as $k => $v){                if(is_array($v)):                    $temp = [];                    foreach($v as $v2){                        $temp[] = $v2;                    }                    $kv[] = $k . ' = ' . join('|', $temp);                else:                    $kv[] = $k . ' = ' . $v;                endif;            }            $post_vars = join('&', $kv);            writelog($post_vars, '$_POST');        }    }    function log_get()    {        if(isset($_GET) && !empty($_GET)){            $kv = [];            foreach($_GET as $k => $v){                if(is_array($v)):                    $temp = [];                    foreach($v as $v2){                        $temp[] = $v2;                    }                    $kv[] = $k . ' = ' . join('|', $temp);                else:                    $kv[] = $k . ' = ' . $v;                endif;            }            $post_vars = join('&', $kv);            writelog($post_vars, '$_GET');        }    }		function print_exception($e)	{		ob_clean();		$message = '<p>' . implode('</p><p>', (!is_array($e->getMessage())) ? [$e->getMessage()] : $e->getMessage()) . '</p>';		$html = '<!DOCTYPE html>			<html lang="en">			<head>			<title>Error</title>			<style type="text/css">			::selection{ background-color: #E13300; color: white; }			::moz-selection{ background-color: #E13300; color: white; }			::webkit-selection{ background-color: #E13300; color: white; }			body {				background-color: #fff;				margin: 40px;				font: 13px/20px normal Helvetica, Arial, sans-serif;				color: #4F5155;			}			a {				color: #003399;				background-color: transparent;				font-weight: normal;			}			h1 {				color: #444;				background-color: transparent;				border-bottom: 1px solid #D0D0D0;				font-size: 19px;				font-weight: normal;				margin: 0 0 14px 0;				padding: 14px 15px 10px 15px;			}			code {				font-family: Consolas, Monaco, Courier New, Courier, monospace;				font-size: 12px;				background-color: #f9f9f9;				border: 1px solid #D0D0D0;				color: #002166;				display: block;				margin: 14px 0 14px 0;				padding: 12px 10px 12px 10px;			}			#container {				margin: 10px;				border: 1px solid #D0D0D0;				-webkit-box-shadow: 0 0 8px #D0D0D0;			}			p {				margin: 12px 15px 12px 15px;			}			</style>			</head>			<body>				<div id="container">					<h1>Error</h1>					' . $message . '				</div>			</body>			</html>';		echo $html;	}    