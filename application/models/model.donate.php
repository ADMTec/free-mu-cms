<?php    in_file();    class Mdonate extends model    {        public $error = false, $vars = [];        public $hash_item = '';        protected $paypal_ipn_url = 'https://www.paypal.com/cgi-bin/webscr';		protected $paypal_ipn_url_ssl = 'www.paypal.com';												         protected $req = 'cmd=_notify-validate';        protected $post = [];        protected $paypal_response;        protected $paypal_debug = 0;        public $order_details = [];        protected $pw_reason_list = [0 => 'Invalid Reason', 1 => 'Chargeback', 2 => 'Credit Card fraud', 3 => 'Order fraud', 4 => 'Bad data entry', 5 => 'Fake / proxy user', 6 => 'Rejected by advertiser', 7 => 'Duplicate conversions', 8 => 'Goodwill credit taken back', 9 => 'Cancelled order', 10 => 'Partially reversed transaction'];        public $google_package = [];        public function __set($key, $val)        {            $this->vars[$key] = $val;        }        public function __isset($name)        {            return isset($this->vars[$name]);        }        public function set_ipn_listeners($data)        {            $server = explode('-', $data, 2)[1];            if($this->config->values('donation_config', [$server, 'paypal', 'sandbox']) == 1){                $this->paypal_ipn_url = 'https://www.sandbox.paypal.com/cgi-bin/webscr';                $this->paypal_ipn_url_ssl = 'www.sandbox.paypal.com';            }        }				public function findReferral($acc){			return $this->website->db('web')->query('SELECT refferer FROM DmN_Refferals WHERE refferal = '.$this->website->db('web')->escape($acc).'')->fetch()['refferer'];		}        public function get_paypal_packages($server)        {            return $this->website->db('web')->query('SELECT id, package, reward, price, currency FROM DmN_Donate_Packages WHERE status = 1 AND server = '.$this->website->db('web')->escape($server).' ORDER BY orders ASC')->fetch_all();        }        public function get_interkassa_packages($server)        {            return $this->website->db('web')->query('SELECT id, package, reward, price, currency FROM DmN_Donate_Interkassa_Packages WHERE status = 1 AND server = '.$this->website->db('web')->escape($server).' ORDER BY orders ASC')->fetch_all();        }        public function get_paycall_packages($server)        {            return $this->website->db('web')->query('SELECT id, package, reward, price FROM DmN_Donate_PayCall_Packages WHERE status = 1 AND server = '.$this->website->db('web')->escape($server).' ORDER BY orders ASC')->fetch_all();        }        public function get_cuenta_digital_packages($server)        {            return $this->website->db('web')->query('SELECT id, package, reward, price, currency FROM DmN_Donate_CuentaDigital_Packages WHERE status = 1 AND server = '.$this->website->db('web')->escape($server).' ORDER BY orders ASC')->fetch_all();        }        public function check_package($id)        {            $count = $this->website->db('web')->snumrows('SELECT COUNT(id) as count FROM DmN_Donate_Packages WHERE id = ' . $this->website->db('web')->escape($id) . ' AND status = 1');            return ($count == 1);        }        public function get_paypal_package_data_by_id($id, $server)        {            $stmt = $this->website->db('web')->prepare('SELECT TOP 1 reward, price, currency FROM DmN_Donate_Packages WHERE id = :id AND status = 1 AND server = :server');            $stmt->execute([':id' => $id, ':server' => $server]);            return $stmt->fetch();        }        public function get_paycall_package_data_by_id($id, $server)        {            $stmt = $this->website->db('web')->prepare('SELECT TOP 1 reward, price FROM DmN_Donate_PayCall_Packages WHERE id = :id AND status = 1 AND server = :server');            $stmt->execute([':id' => $id, ':server' => $server]);            return $stmt->fetch();        }        public function get_cuenta_digital_package_data_by_id($id, $server)        {            $stmt = $this->website->db('web')->prepare('SELECT TOP 1 reward, price, currency FROM DmN_Donate_CuentaDigital_Packages WHERE id = :id AND status = 1 AND server = :server');            $stmt->execute([':id' => $id, ':server' => $server]);            return $stmt->fetch();        }        public function get_interkassa_package_data_by_id($id, $server)        {            $stmt = $this->website->db('web')->prepare('SELECT TOP 1 reward, price, currency FROM DmN_Donate_Interkassa_Packages WHERE id = :id AND status = 1 AND server = :server');            $stmt->execute([':id' => $id, ':server' => $server]);            return $stmt->fetch();        }        public function insert_paypal_order($user, $server, $reward, $price, $currency, $isBattlePass = 0, $isKeys = 0)        {            $this->hash_item = md5($user . $price . $currency . uniqid(microtime(), 1));            if($isBattlePass == 1){                $this->hash_item = 'bp-'.$this->hash_item;            }            if($isKeys == 1){                $this->hash_item = 'mk-'.$this->hash_item;            }            $stmt = $this->website->db('web')->prepare('INSERT INTO DmN_Donate_Orders (amount, currency, credits, account, server, hash) VALUES(:amount, :currency, :credits, :account, :server, :hash)');            return $stmt->execute([':amount' => $price, ':currency' => $currency, ':credits' => $reward, ':account' => $user, ':server' => $server, ':hash' => $this->hash_item]);        }        public function insert_interkassa_order($user, $server, $reward, $price, $currency)        {            $this->hash_item = md5($user . $price . $currency . uniqid(microtime(), 1));            $stmt = $this->website->db('web')->prepare('INSERT INTO DmN_Donate_Interkassa_Orders (amount, currency, credits, account, server, hash) VALUES(:amount, :currency, :credits, :account, :server, :hash)');            return $stmt->execute([':amount' => $price, ':currency' => $currency, ':credits' => $reward, ':account' => $user, ':server' => $server, ':hash' => $this->hash_item]);        }        public function insert_paycall_order($user, $server, $reward, $price)        {            $this->hash_item = md5($user . $price . uniqid(microtime(), 1));            $stmt = $this->website->db('web')->prepare('INSERT INTO DmN_Donate_Paycall_Orders (amount, credits, account, server, hash) VALUES(:amount, :credits, :account, :server, :hash)');            return $stmt->execute([':amount' => $price, ':credits' => $reward, ':account' => $user, ':server' => $server, ':hash' => $this->hash_item]);        }        public function get_paypal_data($user, $server)        {            return ['email' => $this->config->values('donation_config', [$server, 'paypal', 'email']), 'item' => $this->hash_item, 'user' => $user, 'server' => $server];        }        public function get_paycall_data($user, $server, $reward, $price)        {            return ['business_code' => $this->config->values('donation_config', [$server, 'paycall', 'business_code']), 'item' => $this->hash_item, 'user' => $user, 'server' => $server, 'reward' => $reward, 'price' => $price, 'business_name' => $this->config->config_entry('main|servername')];        }        public function check_paycall_order($item)        {            $stmt = $this->website->db('web')->prepare('SELECT TOP 1 amount, credits, account, server FROM DmN_Donate_PayCall_Orders WHERE hash = :item');            $stmt->execute([':item' => $item]);            $this->order_details = $stmt->fetch();        }        public function verifiedTransaction($paycall_unique, $business_code, $test_mode = 0)        {            $requestArg = ["service" => "chckTrans", "tId" => $paycall_unique, "cId" => $business_code, "test" => ($test_mode == 1) ? 1 : 0];            $res = $this->get_paycall_url('http://admin.paycall.co.il/ws.php', 0, http_build_query($requestArg));            $info = simplexml_load_string($res);            if((string)$info->RESULT == "true" && (string)$info->LOOKUP == "0")                return true;            return false;        }        private function get_paycall_url($url, $wsMethod = 1, $argQuery = "")        {            if($wsMethod == 1){                if(strpos($url, "?") !== false)                    $url = $url . "&" . $argQuery; else                    $url = $url . "?" . $argQuery;            }            if(function_exists('curl_init') == true){                $ch = curl_init();                curl_setopt($ch, CURLOPT_URL, $url);                if($wsMethod == 0){                    curl_setopt($ch, CURLOPT_POST, 1);                    curl_setopt($ch, CURLOPT_POSTFIELDS, $argQuery);                }                curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);                $data = curl_exec($ch);                curl_close($ch);            } else{                if($wsMethod == 1){                    $file = fopen($url, "r");                    if(!$file){                        writelog('Unable to open remote file.', 'Paycall');                        exit;                    }                    while(!feof($file))                        $data .= fgets($file, 64);                    fclose($file);                } else{                    $opts = ['http' => ['method' => 'POST', 'header' => 'Content-type: application/x-www-form-urlencoded', 'content' => $argQuery]];                    $context = stream_context_create($opts);                    $file = fopen($url, "r", false, $context);                    if(!$file){                        writelog('Unable to open remote file.', 'Paycall');                        exit;                    }                    $data = '';                    while(!feof($file))                        $data .= fgets($file, 64);                    fclose($file);                }            }            return $data;        }        public function get_2checkout_packages($server)        {            return $this->website->db('web')->query('SELECT id, package, reward, price, currency FROM DmN_2CheckOut_Packages WHERE status = 1 AND server = '.$this->website->db('web')->escape($server).' ORDER BY orders ASC')->fetch_all();        }        public function get_pagseguro_packages($server)        {            return $this->website->db('web')->query('SELECT id, package, reward, price, currency FROM DmN_PagSeguro_Packages WHERE status = 1 AND server = '.$this->website->db('web')->escape($server).' ORDER BY orders ASC')->fetch_all();        }        public function check_2checkout_package($id)        {            $stmt = $this->website->db('web')->prepare('SELECT package, reward, price, currency FROM DmN_2CheckOut_Packages WHERE status = 1 AND id = :id');            $stmt->execute([':id' => $id]);            return $stmt->fetch();        }        public function check_pagseguro_package($id)        {            $stmt = $this->website->db('web')->prepare('SELECT package, reward, price, currency FROM DmN_PagSeguro_Packages WHERE status = 1 AND id = :id');            $stmt->execute([':id' => $id]);            return $stmt->fetch();        }        public function insert_2checkout_order($user, $server, $reward, $price, $currency, $item)        {            $stmt = $this->website->db('web')->prepare('INSERT INTO DmN_2CheckOut_Orders (amount, currency, credits, account, server, hash) VALUES(:amount, :currency, :credits, :account, :server, :hash)');            return $stmt->execute([':amount' => $price, ':currency' => $currency, ':credits' => $reward, ':account' => $user, ':server' => $server, ':hash' => $item]);        }        public function insert_pagseguro_order($user, $server, $reward, $price, $currency, $item)        {            $stmt = $this->website->db('web')->prepare('INSERT INTO DmN_PagSeguro_Orders (amount, currency, credits, account, server, hash) VALUES(:amount, :currency, :credits, :account, :server, :hash)');            return $stmt->execute([':amount' => $price, ':currency' => $currency, ':credits' => $reward, ':account' => $user, ':server' => $server, ':hash' => $item]);        }        public function insert_cuenta_digital_order($user, $server, $reward, $price, $currency, $item)        {            $stmt = $this->website->db('web')->prepare('INSERT INTO DmN_Donate_CuentaDigital_Orders (amount, currency, credits, account, server, hash) VALUES(:amount, :currency, :credits, :account, :server, :hash)');            return $stmt->execute([':amount' => $price, ':currency' => $currency, ':credits' => $reward, ':account' => $user, ':server' => $server, ':hash' => $item]);        }        public function get_2checkout_order_data($hash)        {            $stmt = $this->website->db('web')->prepare('SELECT amount, currency, credits, account, server FROM DmN_2CheckOut_Orders WHERE hash = :hash');            $stmt->execute([':hash' => $hash]);            return $stmt->fetch();        }        public function get_pagseguro_order_data($hash)        {            $stmt = $this->website->db('web')->prepare('SELECT amount, currency, credits, account, server FROM DmN_PagSeguro_Orders WHERE hash = :hash');            $stmt->execute([':hash' => $hash]);            return $stmt->fetch();        }        public function get_cuenta_digital_order_data($hash)        {            $stmt = $this->website->db('web')->prepare('SELECT amount, currency, credits, account, server FROM DmN_Donate_CuentaDigital_Orders WHERE hash = :hash');            $stmt->execute([':hash' => $hash]);            return $stmt->fetch();        }        public function check_existing_2checkout_transaction($order_number)        {            $stmt = $this->website->db('web')->prepare('SELECT id FROM DmN_2CheckOut_Transactions WHERE transaction_id = :order');            $stmt->execute([':order' => $order_number]);            return $stmt->fetch();        }        public function check_existing_cuenta_digital_transaction($hash)        {            $stmt = $this->website->db('web')->prepare('SELECT id FROM DmN_Donate_CuentaDigital_Transactions WHERE order_hash = :hash');            $stmt->execute([':hash' => $hash]);            return $stmt->fetch();        }        public function check_existing_pagseguro_transaction($order_number)        {            $stmt = $this->website->db('web')->prepare('SELECT id FROM DmN_PagSeguro_Transactions WHERE transaction_id = :order');            $stmt->execute([':order' => $order_number]);            return $stmt->fetch();        }        public function insert_2checkout_transaction($order_number, $amount, $currency, $account, $server, $credits, $email, $hash)        {            $stmt = $this->website->db('web')->prepare('INSERT INTO DmN_2CheckOut_Transactions (transaction_id, amount, currency, acc, server, credits, order_date, payer_email, order_hash) VALUES (:trans_id, :gross, :currency, :account, :server, :credits, :time, :payer_email, :order_hash)');            return $stmt->execute([':trans_id' => $order_number, ':gross' => $amount, ':currency' => $currency, ':account' => $account, ':server' => $server, ':credits' => $credits, ':time' => time(), ':payer_email' => $email, ':order_hash' => $hash]);        }        public function insert_cuenta_digital_transaction($amount, $currency, $account, $server, $credits, $hash)        {            $stmt = $this->website->db('web')->prepare('INSERT INTO DmN_Donate_CuentaDigital_Transactions (amount, currency, acc, server, credits, order_date, order_hash) VALUES (:gross, :currency, :account, :server, :credits, :time, :order_hash)');            return $stmt->execute([':gross' => $amount, ':currency' => $currency, ':account' => $account, ':server' => $server, ':credits' => $credits, ':time' => time(), ':order_hash' => $hash]);        }        public function insert_pagseguro_transaction($order_number, $amount, $currency, $account, $server, $credits, $hash)        {            $stmt = $this->website->db('web')->prepare('INSERT INTO DmN_PagSeguro_Transactions (transaction_id, amount, currency, acc, server, credits, order_date, order_hash) VALUES (:trans_id, :gross, :currency, :account, :server, :credits, :time, :order_hash)');            return $stmt->execute([':trans_id' => $order_number, ':gross' => $amount, ':currency' => $currency, ':account' => $account, ':server' => $server, ':credits' => $credits, ':time' => time(), ':order_hash' => $hash]);        }        public function gen_post_fields($data)        {            $data_array = explode('&', $data);            foreach($data_array as $value){                $value = explode('=', $value);                if(count($value) == 2)                    $this->post[$value[0]] = urldecode($value[1]);            }            foreach($this->post as $key => $value){                $this->req .= "&" . $key . "=" . urlencode($value);            }            //$this->req = str_replace('amp;', '', html_entity_decode($this->req, ENT_COMPAT, 'UTF-8'));            writelog('Paypal request ' . $this->req . '', 'Paypal');        }        public function post_back_paypal()        {            $request = curl_init($this->paypal_ipn_url);            if($request == false){                writelog('Unable to initialize curl.', 'Paypal');                return false;            }            curl_setopt($request, CURLOPT_HTTP_VERSION, CURL_HTTP_VERSION_1_1);            curl_setopt($request, CURLOPT_POST, 1);            curl_setopt($request, CURLOPT_RETURNTRANSFER, 1);            curl_setopt($request, CURLOPT_POSTFIELDS, $this->req);            curl_setopt($request, CURLOPT_SSL_VERIFYPEER, 1);            curl_setopt($request, CURLOPT_SSL_VERIFYHOST, 2);            curl_setopt($request, CURLOPT_FORBID_REUSE, 1);            curl_setopt($request, CURLOPT_USERAGENT, 'Free MuCMS');            if($this->paypal_debug == 1){                curl_setopt($request, CURLOPT_HEADER, 1);                curl_setopt($request, CURLINFO_HEADER_OUT, 1);            }            curl_setopt($request, CURLOPT_CONNECTTIMEOUT, 30);            curl_setopt($request, CURLOPT_HTTPHEADER, ['Connection: Close']);            curl_setopt($request, CURLOPT_CAINFO, APP_PATH . DS . 'data' . DS . 'cacert.pem');            $this->paypal_response = curl_exec($request);            if(curl_errno($request) != 0){                writelog('Can\'t connect to PayPal to validate IPN message:' . curl_error($request), 'Paypal');                return false;            } else{                if($this->paypal_debug == 1){                    writelog('HTTP request of validation request:' . curl_getinfo($request, CURLINFO_HEADER_OUT) . ' for IPN payload: ' . $this->req, 'Paypal');                    writelog('HTTP response of validation request: ' . $this->paypal_response, 'Paypal');                }                $tokens = explode("\r\n\r\n", trim($this->paypal_response));                $this->paypal_response = trim(end($tokens));                curl_close($request);                return true;            }        }        public function validate_paypal_payment()        {            if(stripos($this->paypal_response, "VERIFIED") !== false){                if(!$this->check_order_number()){                    return false;                }                if(!$this->check_email()){                    return false;                }                $price = $this->order_details['amount'];                $transaction_fee = $this->config->values('donation_config', [$this->order_details['server'], 'paypal', 'paypal_fee']);                $fixed_fee = $this->config->values('donation_config', [$this->order_details['server'], 'paypal', 'paypal_fixed_fee']);                if(isset($transaction_fee) && $transaction_fee != ''){                    $fee = ($transaction_fee / 100) * $price;                    $price = $price + $fee;                }                if(isset($fixed_fee) && $fixed_fee != ''){                    $price += $fixed_fee;                }                switch($this->vars['payment_status']){                    case 'Completed':                        if($this->vars['tax'] > 0){                            $this->vars['mc_gross'] -= $this->vars['tax'];                        }                        if(number_format($this->vars['mc_gross'], 2, '.', ',') == number_format($price, 2, '.', ',')){                            if($this->vars['mc_currency'] == $this->order_details['currency']){                                if($this->check_completed_transaction()){                                    return false;                                }                                if($this->check_pending_transaction()){                                    if($this->update_transaction_status()){                                        return true;                                    }                                } else{                                    if($this->insert_transaction_status()){                                        return true;                                    }                                }                            } else{                                writelog('Package currency does not match [transaction id: ' . $this->vars['txn_id'] . '], [currency received: ' . $this->vars['mc_currency'] . '], [package currency: ' . $this->order_details['currency'] . ']', 'Paypal');                            }                        } else{                            writelog('Package price does not match [transaction id: ' . $this->vars['txn_id'] . '], [price received: ' . $this->vars['mc_gross'] . '], [package price: ' . number_format($price, 2, '.', ',') . ']', 'Paypal');                        }                        break;                    case 'Pending':                        if($this->vars['tax'] > 0){                            $this->vars['mc_gross'] -= $this->vars['tax'];                        }                        if(number_format($this->vars['mc_gross'], 2, '.', ',') == number_format($price, 2, '.', ',')){                            if(!$this->check_completed_transaction() && !$this->check_pending_transaction()){                                $this->insert_transaction_status();                            }                        } else{                            writelog('Package price does not match [transaction id: ' . $this->vars['txn_id'] . '], [price received: ' . $this->vars['mc_gross'] . '], [package price: ' . number_format($price, 2, '.', ',') . ']', 'Paypal');                        }                        break;                    case 'Reversed':                    case 'Refunded':                        if(!$this->check_refunded_transaction()){                            $this->decrease_credits($this->order_details['account'], $this->order_details['server'], $this->order_details['credits'], $this->config->values('donation_config', [$this->order_details['server'], 'paypal', 'reward_type']));                            $this->update_transaction_status(true);                            if($this->config->values('donation_config', [$this->order_details['server'], 'paypal', 'punish_player']) == 1){                                $this->block_user($this->order_details['account'], $this->order_details['server']);                            }                        }                        break;                }            } else if(stripos($this->paypal_response, "INVALID") !== false){                writelog('PayPal sent [status: INVALID] [transaction id: ' . $this->vars['txn_id'] . '] [response:' . print_r($this->paypal_response, true) . ']', 'Paypal');            } else{                writelog('PayPal sent [status: UNKNOWN] [transaction id: ' . $this->vars['txn_id'] . '] [response:' . print_r($this->paypal_response, true) . ']', 'Paypal');            }            return false;        }        public function validate_paycall_payment($paycall_unique, $hash, $total_amount)        {            if($this->check_paycall_transaction($hash)){                writelog('Transaction already proccesse.', 'Paycall');                return false;            } else{                if($this->insert_paycall_transaction($paycall_unique, $hash, $total_amount)){                    return true;                }            }        }        private function check_paycall_transaction($hash)        {            $stmt = $this->website->db('web')->prepare('SELECT TOP 1 id FROM DmN_Donate_PayCall_Transactions WHERE order_hash = :item');            $stmt->execute([':item' => $hash]);            return $stmt->fetch();        }        private function insert_paycall_transaction($paycall_unique, $hash, $total_amount)        {            $stmt = $this->website->db('web')->prepare('INSERT INTO DmN_Donate_PayCall_Transactions (transaction_id, amount, acc, server, credits, order_date, order_hash) VALUES (:transid, :amount, :acc, :server, :credits, :order_date, :order_hash)');            return $stmt->execute([':transid' => $paycall_unique, ':amount' => $total_amount, ':acc' => $this->order_details['account'], ':server' => $this->order_details['server'], ':credits' => $this->order_details['credits'], ':order_date' => time(), ':order_hash' => $hash]);        }                public function check_email($email = '')        {            $email1 = ($email != '') ? strtolower($email) : strtolower(urldecode($this->vars['receiver_email']));            $email2 = ($email != '') ? strtolower($email) : strtolower(urldecode($this->vars['business']));            $email3 = strtolower($this->config->values('donation_config', [$this->order_details['server'], 'paypal', 'email']));            if(!in_array($email3, [$email1, $email2])){                writelog('PayPal sent invalid reciever email: ' . $email1 . ', business email: ' . $email2.', config: '.$email3, 'Paypal');                return false;            }            return true;        }        public function check_interkassa_order_number($trans_id)        {            $this->order_details = $this->website->db('web')->query('SELECT amount, currency, account, server, credits FROM DmN_Donate_Interkassa_Orders where hash = '.$this->website->db('web')->escape($trans_id).'')->fetch();            if(is_array($this->order_details))                return true;            return false;        }        public function check_completed_interkassa_transaction($trans_id)        {            $count = $this->website->db('web')->snumrows('SELECT COUNT(id) AS count FROM DmN_Donate_Interkassa_Transactions where transaction_id = '.$this->website->db('web')->escape($trans_id).'');            if($count > 0){                return true;            }            return false;        }        public function insert_interkassa_transaction($trans_id, $amount)        {            $stmt = $this->website->db('web')->prepare('INSERT INTO DmN_Donate_Interkassa_Transactions (transaction_id, amount, currency, acc, server, credits, order_date) VALUES (:trans_id, :gross, :currency, :account, :server, :credits, :time)');            return $stmt->execute([':trans_id' => $trans_id, ':gross' => $amount, ':currency' => $this->order_details['currency'], ':account' => $this->order_details['account'], ':server' => $this->order_details['server'], ':credits' => $this->order_details['credits'], ':time' => time()]);        }        public function check_order_number($item = '')        {            $item = ($item != '') ? $item : $this->vars['item_number'];            $count = $this->website->db('web')->snumrows('SELECT COUNT(id) AS count FROM DmN_Donate_Orders where hash = '.$this->website->db('web')->escape($item).'');            if($count == 1){                $this->order_details = $this->website->db('web')->query('SELECT amount, currency, account, server, credits FROM DmN_Donate_Orders where hash = '.$this->website->db('web')->escape($item).'')->fetch();                return true;			 	             } else{                   writelog('PayPal sent invalid order [transaction id: ' . $this->vars['txn_id'] . ']', 'Paypal');                return false;				             }        }        public function check_completed_transaction($id = '')        {            $id = ($id != '') ? $id : $this->vars['txn_id'];            $count = $this->website->db('web')->snumrows('SELECT COUNT(id) AS count FROM DmN_Donate_Transactions where transaction_id = '.$this->website->db('web')->escape($id).' and status = \'Completed\'');            if($count > 0){                return true;            }            return false;        }        public function check_pending_transaction($id = '')        {            $id = ($id != '') ? $id : $this->vars['txn_id'];            $count = $this->website->db('web')->snumrows('SELECT COUNT(id) AS count FROM DmN_Donate_Transactions where transaction_id = '.$this->website->db('web')->escape($id).' and status = \'Pending\'');            if($count > 0){                return true;            }            return false;        }        private function check_refunded_transaction()        {            $count = $this->website->db('web')->snumrows('SELECT COUNT(id) AS count FROM DmN_Donate_Transactions where transaction_id = '.$this->website->db('web')->escape($this->vars['parent_txn_id']).' and (status = \'Refunded\' OR status = \'Reversed\')');            if($count > 0){                return true;            }            return false;        }        private function update_transaction_status($refund = false, $id = '', $status = '')        {            $tnx_id = ($refund == false) ? ($id != '') ? $id : $this->vars['txn_id'] : $this->vars['parent_txn_id'];            $status = ($status != '') ? $status : $this->vars['payment_status'];            $stmt = $this->website->db('web')->prepare('UPDATE DmN_Donate_Transactions SET status = :status WHERE transaction_id = :trans_id');            return $stmt->execute([':status' => $status, ':trans_id' => $tnx_id]);        }       public function insert_transaction_status($id = '', $gross = '', $currency = '', $status = '', $email = '', $hash = '', $country = '')        {            $id = ($id != '') ? $id : $this->vars['txn_id'];            $gross = ($gross != '') ? $gross : $this->vars['mc_gross'];            $currency = ($currency != '') ? $currency : $this->vars['mc_currency'];            $status = ($status != '') ? $status : $this->vars['payment_status'];            $email = ($email != '') ? $email : $this->vars['payer_email'];            $hash = ($hash != '') ? $hash : $this->vars['item_number'];            $country = ($country != '') ? $country : $this->vars['residence_country'];            $stmt = $this->website->db('web')->prepare('INSERT INTO DmN_Donate_Transactions (transaction_id, amount, currency, acc, server, credits, order_date, status, payer_email, order_hash, country) VALUES (:trans_id, :gross, :currency, :account, :server, :credits, :time, :payment_status, :payer_email, :order_hash, :country)');            return $stmt->execute([':trans_id' => $id, ':gross' => $gross, ':currency' => $currency, ':account' => $this->order_details['account'], ':server' => $this->order_details['server'], ':credits' => $this->order_details['credits'], ':time' => time(), ':payment_status' => $status, ':payer_email' => $email, ':order_hash' => $hash, ':country' => $country]);        }                private function check_vip($account, $server)        {            $stmt = $this->website->db('web')->prepare('SELECT viptype, viptime FROM DmN_Vip_Users WHERE memb___id = :account AND server = :server');            $stmt->execute([':account' => $account, ':server' => $server]);            return $stmt->fetch();        }        private function get_vip_package_donation_bonus($id, $server)        {            $stmt = $this->website->db('web')->prepare('SELECT TOP 1 bonus_credits_for_donate FROM DmN_Vip_Packages WHERE id = :id AND server = :server  AND status = 1 ORDER BY id ASC');            $stmt->execute([':id' => $id, ':server' => $server]);            return $stmt->fetch();        }        public function reward_user($account, $server, $credits, $reward_type = 2, $guid = false)        {            if($vip_data = $this->check_vip($account, $server)){                if($vip_data['viptime'] > time()){                    if($package = $this->get_vip_package_donation_bonus($vip_data['viptype'], $server)){                        $bonus = ($credits / 100) * $package['bonus_credits_for_donate'];                        $credits += $bonus;                        $this->add_account_log('Vip bonus ' . $this->website->translate_credits($reward_type, $server) . ' for donation', $bonus, $account, $server);                    }                }            }			$this->add_total_recharge($account, $server, abs(floor($credits)));            $this->website->add_credits($account, $server, abs(floor($credits)), $reward_type, false, $guid);        }        public function decrease_credits($account, $server, $credits, $decrease_type = 2)        {            $this->website->charge_credits($account, $server, abs(floor($credits)), $decrease_type);        }				public function add_total_recharge($account, $server, $credits)		{			if($this->website->db('web')->check_if_table_exists('DmN_Total_Recharge')){				$this->insert_recharge($account, $server, $credits);			}		}				private function insert_recharge($account, $server, $credits)        {            $stmt = $this->website->db('web')->prepare('INSERT INTO DmN_Total_Recharge (account, server, points, date) VALUES (:account, :server, :points, GETDATE())');            $stmt->execute([':account' => $account, ':server' => $server, ':points' => $credits]);        }        public function block_user($acc, $server)        {            $stmt = $this->website->db('account', $server)->prepare('UPDATE MEMB_INFO SET bloc_code = 1 WHERE memb___id = :account');            $stmt->execute([':account' => $acc]);            $this->add_to_banlist($acc, $server);        }        private function add_to_banlist($acc, $server)        {            $stmt = $this->website->db('web')->prepare('INSERT INTO DmN_Ban_List (name, type, server, time) VALUES (:name, :type, :server, :time)');            $stmt->execute([':name' => $acc, ':type' => 1, ':server' => $server, ':time' => strtotime('+5 years')]);        }        public function validate_ip_list($data, $type = 'paymentwall')        {			$server = explode('-server-', $data)[1];			return (in_array(ip(), explode(',', $this->config->values('donation_config', [$server, $type, 'allowed_ip_list']))));        }                public function check_reference($uid, $server, $ref)        {            $count = $this->website->db('web')->snumrows('SELECT COUNT(uid) AS count FROM DmN_Donate WHERE uid = '.$this->website->db('web')->escape($uid).' AND server = '.$this->website->db('web')->escape($server).' AND ref = '.$this->website->db('web')->escape($ref).'');            if($count > 0){                return true;            }            return false;        }        public function log_pw_transaction($uid, $server, $currency, $type, $ref)        {            $prepare = $this->website->db('web')->prepare('INSERT INTO DmN_Donate (uid, server, currency, type, ref, reason, order_date) VALUES (:uid, :server, :currency, :type, :ref, :reason, :time)');            return $prepare->execute([':uid' => $uid, ':server' => $server, ':currency' => $currency, ':type' => $type, ':ref' => $ref, ':reason' => 'Complete', ':time' => time()]);        }        public function change_pw_transaction_status($currency, $reason, $uid, $ref)        {            $stmt = $this->website->db('web')->prepare('UPDATE DmN_Donate SET currency = :currency, reason = :reason, order_date = :order_date WHERE uid =:uid AND ref = :ref');            $stmt->execute([':currency' => $currency, ':reason' => $this->pw_reason_list[$reason], ':order_date' => time(), ':uid' => $uid, ':ref' => $ref]);        }        public function check_fortumo_transaction($id)        {            $stmt = $this->website->db('web')->prepare('SELECT payment_id FROM DmN_Donate_Fortumo WHERE payment_id = :payment');            $stmt->execute([':payment' => $id]);            return ($stmt->fetch()) ? true : false;        }        public function log_fortumo_transaction($id, $sender, $acc, $server, $amount)        {            $stmt = $this->website->db('web')->prepare('INSERT INTO DmN_Donate_Fortumo (payment_id, sender, account, server, credits) VALUES (:payment, :sender, :acc, :server, :amount)');            $stmt->execute([':payment' => $id, ':sender' => $sender, ':acc' => $acc, ':server' => $server, ':amount' => $amount]);        }        public function fortumo_sig_check($params_array)        {            $server = explode('-server-', $params_array['cuid'])[1];            ksort($params_array);            $str = '';            foreach($params_array as $k => $v){                if($k != 'sig' && $k != 'action'){                    $str .= "$k=$v";                }            }            $str .= $this->config->values('donation_config', [$server, 'fortumo', 'secret']);            $signature = md5($str);            return $signature;        }        public function log_paygol_transaction($message_id, $message, $shortcode, $sender, $operator, $country, $currency, $price, $acc, $server)        {            $stmt = $this->website->db('web')->prepare('INSERT INTO DmN_PayGoal_Log(message_id, message, shortcode, sender, operator, country, currency, price, acc, server) VALUES (:message_id, :message, :shortcode, :sender, :operator, :country, :currency, :price, :acc, :server)');            $stmt->execute([':message_id' => $message_id, ':message' => $message, ':shortcode' => $shortcode, ':sender' => $sender, ':operator' => $operator, ':country' => $country, ':currency' => $currency, ':price' => $price, ':acc' => $acc, ':server' => $server]);        }        public function sent_donate_email($user, $server, $email, $amount, $type, $balance)        {            $body = @file_get_contents(APP_PATH . DS . 'data' . DS . 'email_patterns' . DS . 'donate_email_pattern.html');            $body = str_replace('###USERNAME###', $user, $body);            $body = str_replace('###SERVERNAME###', $this->config->config_entry('main|servername'), $body);            $body = str_replace('###LINK###', $this->config->base_url, $body);            $body = str_replace('###AMOUNT###', $amount, $body);            $body = str_replace('###TYPE###', $type, $body);            $body = str_replace('###BALANCE###', $balance["credits"], $body);            $this->sendmail($email, 'Thank you for donation', $body);            if($this->error == false){                return true;            } else{                return false;            }        }        public function sent_donate_email_admin($user, $server, $email, $amount, $type, $balance, $system)        {            $body = @file_get_contents(APP_PATH . DS . 'data' . DS . 'email_patterns' . DS . 'donate_email_admin_pattern.html');            $body = str_replace('###USERNAME###', $user, $body);            $body = str_replace('###SERVERNAME###', $this->config->config_entry('main|servername'), $body);            $body = str_replace('###LINK###', $this->config->base_url, $body);            $body = str_replace('###AMOUNT###', $amount, $body);            $body = str_replace('###TYPE###', $type, $body);            $body = str_replace('###BALANCE###', $balance["credits"], $body);            $body = str_replace('###SYSTEM###', $system, $body);                        $this->Maccount->sendmail($email, 'New ' . $system . ' donation received', $body);            if($this->Maccount->error == false){                return true;            } else{                return false;            }        }    }